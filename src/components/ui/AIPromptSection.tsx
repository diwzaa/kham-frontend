'use client';

import React, { useState } from 'react';
import Button from './Button';
import styles from '@/styles/components/AIPromptSection.module.css';

interface AIPromptSectionProps {
  onGenerate: (prompt: string, tags: string[]) => void;
  onClose: () => void;
}

export default function AIPromptSection({ onGenerate, onClose }: AIPromptSectionProps) {
  const [prompt, setPrompt] = useState('');
  const [selectedTags, setSelectedTags] = useState<string[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);

  const predefinedTags = ['tag 1', 'tag 2', 'tag 3', 'tag 4'];

  const toggleTag = (tag: string) => {
    setSelectedTags(prev => 
      prev.includes(tag) 
        ? prev.filter(t => t !== tag)
        : [...prev, tag]
    );
  };

  const handleGenerate = async () => {
    if (!prompt.trim()) return;
    
    setIsGenerating(true);
    try {
      await onGenerate(prompt, selectedTags);
      setPrompt('');
      setSelectedTags([]);
    } finally {
      setIsGenerating(false);
    }
  };

  return (
    <div className={styles.aiSection}>
      <div className="container">
        <div className={styles.content}>
          <div className={styles.header}>
            <h2 className={styles.title}>‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£</h2>
            <Button variant="outline" onClick={onClose}>
              ‚Üê ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
            </Button>
          </div>

          <div className={styles.promptArea}>
            <label className={styles.label}>
              ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏•‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô "‡∏•‡∏≤‡∏¢‡∏Å‡∏ô‡∏Å‡∏ó‡πâ‡∏≠‡∏á‡∏•‡∏≤‡∏¢ ‡πÄ‡∏õ‡πá‡∏ô ‡∏•‡∏≤‡∏¢‡∏á‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏±‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå"
            </label>
            <textarea
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
              placeholder="‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏•‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô ‡∏•‡∏≤‡∏¢‡∏Å‡∏ô‡∏Å‡∏ó‡πâ‡∏≠‡∏á‡∏•‡∏≤‡∏¢ ‡πÄ‡∏õ‡πá‡∏ô ‡∏•‡∏≤‡∏¢‡∏á‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏±‡∏î‡∏û‡∏¥‡∏°‡∏û‡πå"
              className={styles.textarea}
              rows={4}
            />
          </div>

          <div className={styles.tagsSection}>
            <label className={styles.label}>‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á Prompt:</label>
            <div className={styles.tags}>
              {predefinedTags.map((tag, index) => (
                <button
                  key={index}
                  className={`${styles.tag} ${selectedTags.includes(tag) ? styles.tagActive : ''}`}
                  onClick={() => toggleTag(tag)}
                >
                  {tag}
                </button>
              ))}
            </div>
          </div>

          <div className={styles.actions}>
            <Button 
              onClick={handleGenerate}
              disabled={!prompt.trim() || isGenerating}
              size="large"
              fullWidth
            >
              {isGenerating ? 'üé® ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...' : '‚ú® ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ AI'}
            </Button>
          </div>

          <div className={styles.exampleSection}>
            <h3 className={styles.exampleTitle}>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ö‡∏ö</h3>
            <div className={styles.examples}>
              {[1, 2, 3, 4].map((num) => (
                <div key={num} className={styles.exampleCard}>
                  <div className={styles.placeholder}>
                    <span>KRAM-{num}</span>
                  </div>
                  <p className={styles.exampleText}>
                    ‡∏™‡∏õ‡∏£‡∏°‡∏ã‡∏≤‡∏¢‡∏Ñ‡∏£‡∏≤‡∏°‡πÑ‡∏ó‡∏¢‡∏¢‡∏°‡∏î‡∏¥‡πâ‡∏ô‡πÄ‡∏á‡∏õ‡πâ‡∏ô ‡∏ß‡∏¥‡∏•‡∏≤‡πà‡∏≤‡∏ô‡πÄ‡∏ó‡∏≤‡πÑ‡∏õ‡∏°‡∏≤‡πÉ‡∏Ñ‡∏£‡∏Ç
                  </p>
                  <Button 
                    variant="secondary" 
                    size="small"
                    onClick={() => {/* Handle example selection */}}
                  >
                    ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡∏∑‡πâ‡∏≠‡∏°‡∏π‡∏•
                  </Button>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}